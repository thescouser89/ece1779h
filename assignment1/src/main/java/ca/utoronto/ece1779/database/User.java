package ca.utoronto.ece1779.database;
import java.sql.*;
import java.util.List;
import java.util.LinkedList;

public class User {
    private final int id;
    private String login;
    private String password;

    public User(int id, String login, String password) {
        this.id = id;
        this.login = login;
        this.password = password;
    }

    public User(String login, String password) {
        // set id to 0 as the default value
        this.id = 0;
        this.login = login;
        this.password = password;
    }

    public int getId() {
        return id;
    }

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public static List<User> getAllUsers() {
        List<User> users = new LinkedList<User>();
        Connection con = DatabaseConnection.getInstance().getConnection();
        String query = "SELECT * from users";

        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                int id = rs.getInt("id");
                String login = rs.getString("login");
                String password = rs.getString("password");
                users.add(new User(id, login, password));
            }

            return users;

        } catch (SQLException e) {
            e.printStackTrace();
            return users;
        } finally {
            closeConnection(con);
        }
    }
    public static User findUserWithId(int id) {
        Connection con = DatabaseConnection.getInstance().getConnection();
        String query = "SELECT * from users where id = " + id;

        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            if (rs.next()) {
                String login = rs.getString("login");
                String password = rs.getString("password");
                return new User(id, login, password);
            } else {
                return null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        } finally {
            closeConnection(con);
        }

    }

    /**
     * Save a new User to the database
     *
     * Note that you don't have to specify the id in the User object. It will
     * be created automatically by the user.
     *
     * @param newUser: User object
     * @return whether the save was successful or not.
     */
    public static boolean addUser(User newUser) {
        Connection con = DatabaseConnection.getInstance().getConnection();

        String insert = "INSERT INTO users(id, login, password) VALUES(?, ?, ?);";

        try {
            // Using prepared statement to avoid SQL injections
            PreparedStatement ps = con.prepareStatement(insert);

            // set id null so that it is auto-generated by MySQL
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, newUser.getLogin());    // set the login info
            ps.setString(3, newUser.getPassword()); // set the password info

            ps.execute();
            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            closeConnection(con);
        }
    }

    public static boolean modifyUser(User user) {
        Connection con = DatabaseConnection.getInstance().getConnection();

        String update = "UPDATE users SET login=?, password=? WHERE id=?";

        try {
            // Using prepared statement to avoid SQL injections
            PreparedStatement ps = con.prepareStatement(update);

            ps.setString(1, user.getLogin());      // update the login info
            ps.setString(2, user.getPassword());   // update the password info
            ps.setInt(3, user.getId());            // locate which row to change

            ps.execute();
            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            closeConnection(con);
        }
    }

    public static User findUser(String login) {
        Connection con = DatabaseConnection.getInstance().getConnection();
        String query = "SELECT * from users where login=?;";

        try {
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, login);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int id = rs.getInt("id");
                String password = rs.getString("password");
                return new User(id, login, password);
            } else {
                return null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        } finally {
            closeConnection(con);
        }
    }

    public static boolean deleteUser(User toDelete) {
        Connection con = DatabaseConnection.getInstance().getConnection();

        String delete = "Delete FROM users WHERE id=" + toDelete.getId();

        try {
            Statement stmt = con.createStatement();
            stmt.execute(delete);
            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            closeConnection(con);
        }

    }

    public static boolean deleteAll() {
        Connection con = DatabaseConnection.getInstance().getConnection();

        String deleteAll = "Delete FROM users";

        try {
            Statement stmt = con.createStatement();
            stmt.execute(deleteAll);
            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            closeConnection(con);
        }
    }

    private static void closeConnection(Connection con) {
        try {
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Could not close connection");
        }
    }
}
